class Solution {
    public int snakesAndLadders(int[][] board) {
        // This is a normal BFS questions will I will solve using a 1D array 
        Queue<Integer> q = new LinkedList<>();
        int n = board.length;
        int steps = 0;
        boolean visited[][] = new boolean[n][n]; //to make sure we remember the visited cells 
        q.add(1); // initial value to start 
        visited[n-1][0] = true; 
        while(!q.isEmpty()){
            int size = q.size();
            for(int i=0; i<size; i++){
                int x = q.poll();
                // if we have reached the end
                if(x == n*n){
                    return steps;
                }
                // for rolling the dice 
                for(int j=1; j<=6; j++){
                    if(x+j > n*n){
                        break;
                    }
                    int position[] = find(x+j, n); // custom funtion to find the coordinates
                    int r = position[0];
                    int c = position[1];
                    // if we have already seen the coordinates
                    if(visited[r][c] == true){
                        continue;
                    }
                    visited[r][c] = true;
                    if(board[r][c] == -1){
                        q.add(j+x);
                    }else{
                        q.add(board[r][c]);
                    }  
                }
            }
            steps++;
        } 
        return -1;
    }
    
    private int[] find(int a, int n){
        int row = n - ( a - 1) / n - 1;
        int col = (a - 1) % n;
        if(row % 2 == n % 2){
            return new int[]{row, n-1-col};
        }else{
            return new int[]{row,col};
        }
    }
}
